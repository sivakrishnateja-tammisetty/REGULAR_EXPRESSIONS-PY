REGULAR EXPRESSION:
-------------------
  *Regular expression is also know as regex.
  * Regular Expression, is a sequence of characters that forms a search pattern.
  *These regular expression is mostly prefered for strings.
  *whenever we use regular expression ,we need to import module( import re).
  *why these regular expression ?
    These are used to validate input.



NOTE: we can mention flags=0 or leave it empty.

Eg1: using match() function

import re
pattern="siva"
if re.match(pattern,"siv"):
    print("True")
else:
    print("False")

o/p:
False


import re
pattern="siva"
if re.match(pattern,"sivakileeffdmf"):
    print("True")
else:
    print("False")

o/p:
True



* MATCH AND FINDALL:
  ------------------

 match():
 -------

 *match() checks characters in pattern with string.
* Match() checks no.of characters sequence present in pattern sholud match with string,and rest of them are our wish.

 *syntax :
          match(pattern,string,flags)
  flags :flags specify bitwise operators (0/1).


Eg:
import re
pattern="apples"
if re.match(pattern,"apple"):
    print("True")
else:
    print("False")

o/p: False


* findall():
  ----------

*findall :Returns a list containing all matches
*syntax: findall(pattern,string,flags)


Eg:
import re
pattern="apple"
string_1=re.findall("apple",pattern)
print(string_1)
string_2=re.findall("app",pattern)
print(string_2)
string_3=re.findall("xyz",pattern)
print(string_3)

o/p:
['apple']
['app']
[]


Eg:
import re
pattern="apple"
string_1=re.findall("le",pattern)
print(string_1)

o/p:
['le']

Eg:
txt = "The rain in Spain"
x = re.findall("ai", txt)
print(x)

o/p:
['ai' 'ai']



*search:
 ------

 *The search() function searches the string for a match, and returns a Match object if there is a match.
 *syntax: search(pattern,string,flags)


Eg:
import re
pattern="apple"
if re.search(pattern, "applesapple"):
    print("True")
else:
    print("False")
o/p:True


Eg:
import re
pattern="apple"
if re.search(pattern, "applsapp"):
    print("True")
else:
    print("False")

o/p: False





*sub():
 -----

 *syntax : sub(pattern,replace,string,count,flags)


Eg:
import re
string="It is a dog"
pattern="dog"
print(re.sub(pattern,"cat",string,count=0))

o/p:
It is a cat





*characters and character sequences:
 ----------------------------------

* ^ : Matches the begining of a line.
* $ :Matches the end of a line.
* . :Matches any character.
* \d :Matches any digit.
* \D : Matches any non-digit.
* \s :Matches whitespace.
* \S :Matches any non-whitespace.



Eg1:
import re
string="Hello how r u 123"
pattern="^H"
print(re.findall(pattern,string))

o/p: ['H']


import re
string="Hello how r u 123"
pattern="^e"
print(re.findall(pattern,string))

o/p: []


Eg2:
import re
string="Hello how are you"
pattern="e$"
print(re.findall(pattern,string))

o/p: []

import re
string="Hello how are you"
pattern="u$"
print(re.findall(pattern,string))

o/p: ['u']



Eg3:
import re
string="Hello how are you"
pattern="."
print(re.findall(pattern,string))

o/p:
['H', 'e', 'l', 'l', 'o', ' ', 'h', 'o', 'w', ' ', 'a', 'r', 'e', ' ', 'y', 'o', 'u']

import re
string="Hello how are you"
pattern="^H."
print(re.findall(pattern,string))

o/p: ['He']


import re
string="Hello how are you"
pattern="^H.."
print(re.findall(pattern,string))

o/p: ['Hel']

Eg4:
import re
string="Hello how are you 123 45"
pattern="\d"
print(re.findall(pattern,string))

o/p:
['1', '2', '3', '4', '5']


import re
string="Hello how are you"
pattern="\d"
print(re.findall(pattern,string))

o/p: []


Eg5:
import re
string="Hello how are you 12 3"
pattern="\D"
print(re.findall(pattern,string))

o/p:
['H', 'e', 'l', 'l', 'o', ' ', 'h', 'o', 'w', ' ', 'a', 'r', 'e', ' ', 'y', 'o', 'u', ' ', ' ']


Eg6:
import re
string="Hello how are you 12 3"
pattern="\s"
print(re.findall(pattern,string))

o/p: [' ', ' ', ' ', ' ', ' ']

import re
string="Hellohowareyou123"
pattern="\s"
print(re.findall(pattern,string))

o/p: []

Eg7:
import re
string="Hello how are you 12 3"
pattern="\S"
print(re.findall(pattern,string))

o/p:
['H', 'e', 'l', 'l', 'o', 'h', 'o', 'w', 'a', 'r', 'e', 'y', 'o', 'u', '1', '2', '3']



CHARACTER AND CHARACTER SQUENCES PART-2:
----------------------------------------

* * : Repates a character 0 or more times.
* + : Repeates a character 1 or more times.
* ( : Indicates where string extraction is to start.
* ) : Indicates where string extraction is to end.
* ? : Matches the expression 0 to 1 times



Eg1:
import re
string="From bobby.mark@mail.com"
pattern="ma*"
print(re.findall(pattern,string))

o/p:
['m', 'ma', 'ma', 'm']


Eg2:

import re
string="From bobby.mark@mail.com"
pattern="ma+"
print(re.findall(pattern,string))

o/p:
['ma', 'ma']

Eg3:
import re
string="From bobby.mark@mail.com"
pattern="^F.*?"
print(re.findall(pattern,string))
o/p:
['F']



Eg4:
import re
string="From bobby.mark@mail.com"
pattern="^From (\S+@\S+)"
print(re.findall(pattern,string))

o/p:
['bobby.mark@mail.com']






CHARACTERS AND CHARACTER SQUENCE 3:
-----------------------------------

* [] : dont give empty list as pattern.
* [aeiou] : Matches a single character in a listed set.
* [^xyz] : It will print all characters present in string except xyz.
* [a-z 0-9] : set of characters can include a range.
* {} : It helps us to define no.of characters present




Eg1:
import re
string="Python"
pattern="[]"
print(re.findall(pattern,string))

o/p:
error  


Eg2:
import re
string="Python is a versatile language."
pattern="[aeiou]"
print(re.findall(pattern,string))

o/p:
['o', 'i', 'a', 'e', 'a', 'i', 'e', 'a', 'u', 'a', 'e']


import re
string="Python"
pattern="[aeiou]"
print(re.findall(pattern,string))
o/p: ['o']




Eg3:
import re
string="Python"
pattern="[^o]"
print(re.findall(pattern,string))

o/p:
['P', 'y', 't', 'h', 'n']




import re
string="Python"
pattern="[^xz]"
print(re.findall(pattern,string))

o/p:
['P', 'y', 't', 'h', 'o', 'n']




Eg4:
import re
string="python 3.0"
pattern="[a-z 0-9]"
print(re.findall(pattern,string))

o/p:
['p', 'y', 't', 'h', 'o', 'n', ' ', '3', '0']




import re
string="PyThon 3.0"
pattern="[A-Z]"
print(re.findall(pattern,string))

o/p:
['P','T']




Eg5:
import re
string="pythonn"
pattern="python{2}"
print(re.findall(pattern,string))

o/p:
['pythonn']




import re
string="pythonn"
pattern="python{1}"
print(re.findall(pattern,string))

o/p:
['python']




import re
string="pythonn"
pattern="python{0}"
print(re.findall(pattern,string))

o/p:
['pytho']




import re
string="pythonn"
pattern="python{3}"
print(re.findall(pattern,string))
o/p:
[]          Because ,it was present only 2 n's.


